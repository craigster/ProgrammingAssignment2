install.package("vcd")
install.packages("vcd")
vingette()
vignette()
vignette('vcd')
vignette("vcd")
help.start()
help(package="vcd")
library(vcd)
help(Arthritis)
Arthritis
example(Arthritis)
q()
demo(graphics)
a <- c(1,4,5,2,6,8)
a * 5
b <- c(1,1,1,1,1)
a + b
b[6] <- 2
a + b
a[2:5]
a[3,]
a[3:]
a[c(2,4,6)]
y <- matrix(1:20, nrows=5, rcols=4)
y <- matrix(1:20, nrows=5, ncols=4)
y <- matrix(1:20, nrow=5, ncol=4)
y
y <- matrix(1:20, nrow=4, nrol=5)
y <- matrix(1:20, nrow=4, ncol=5)
y
cells <- c(1,26,24,68)
rnames <- c("R1", "R2")
cnames <- c("C1", "C2")
mymatrix <- matrix(cells, nrow=2, ncol=2, byrow=TRUE, dimnames=list(rnames, cnames))
mymatric
mymatrix
y <- matrix(1:20, nrow=4, ncol=5, byrow=TRUE)
y
y <- matrix(1:20, nrow=4, ncol=5, bycol=TRUE)
y <- matrix(1:20, nrow=4, ncol=5, byrow=FALSE)
y
mymatrix[1,1]
mymatrix[1,2]
mymatrix[R1,C2]
mymatrix["R1","C2"]
mymatrix["R2","C2"]
mymatrix[1,]
mymatrix[,1]
dim1 <- c("a1", "a2")
dim2 <- c("b1", "b2", "b3")
dim3 <- c("c1", "c2", "c3", "c4")
z <- array(1:24, c(2,3,4), dimnames=list(dim1, dim2, dim3))
z
patientID <- c(1,2,3,4)
age <- c(25,34,28,52)
diabetes <- c("Type1", "Type2", "Type1", "Type1")
status <- c("Poor", "Improved", "Excellent", "Poor")
patientdata <- data.frame(patientID,age,diabetes,status)
patientdata
patientdata[1:2]
patientdata[c(1,3,4)]
patientdata[,c(1,3,4)]
patientdata[1,c(1,4)]
patientdata[c(1,4),]
patientdata$age
patientdata[c("diabetes", "status")]
table(patientdata$diabetes, patientdata$age)
table(patientdata$diabetes, patientdata$status)
summary(mtcars$mpg)
plot(mtcars$mpg,mtcars$disp)
plot(mtcars$mpg,mtcars$wt)
plot(mtcars$disp,mtcars$wt)
attach(mtcars)
summary(mpg)
plot(mpg,wt)
detach(mtcars)
lm(mpg~wt, data=mtcars)
a <- available.packages()
head(rownames(a),3)
head(rownames(a),5)
head(rownames(a),10)
install.packages("slidify")
source("http://bioconductor.org/biocLite.R")
biocLite()
install.packages('ggplot2')
library(ggplot2)
search()
library(devtools)
install.packages('devtools')
library(devtools)
find_rtools()
install.packages("kernsmooth")
install.packages("KernSmooth")
library(KernSmooth)
library(swirl)
install_from_swirl("Sequences of Numbers")
swirl()
swirl()
remove.packages(swirl)
remove.packages("swirl")
bye()
swirl()
install.package("swirl")
bye()
install.package("swirl")
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("Sequences of Numbers")
swirl()
remove.packages("swirl")
x <- 1:10
if (x < 5) { x <- 0 }
}
setwd("~/DataScience")
source("temp.R")
z <- 10
f(3)
z <- 25
f(3)
source("temp.R")
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
x<-5
y<-if (x<3) { NA } else { 10 }
y
x<-1
y<-if (x<3) { NA } else { 10 }
y
search()
?solve
?matrix
x <- matrix(data=c(1,2,2,1), nrow=2, ncol=2)
x
solve(x)
solve(x) %*% x
solve(x)%*%x
x
y <- solve(x%*%x)
y
y <- solve(x)%*%x
y
x%*solve(x)
x%*%solve(x)
tau <- c(0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0)
tau <- matrix(tau, ncol=5, byrow=T)
tau <- matrix(tau, ncol=4, byrow=T)
tau
tau %*% solve(tau)
tau <- c(0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0)
tau <- matrix(tau, ncol=5, byrow=T)
tau
tau %*% solve(tau)
tau <- c(2,2,2,2,1,2,2,2,1,2,2,2,1,2,2,2,1,2,2,2,1,2,2,2,2)
tau <- matrix(tau, ncol=5, byrow=T)
tau
tau %*% solve(tau)
?solve
solve(tau)
hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
hibert(8)
hilbert(8)
solve(hilbert(8))
source("cachematrix.R")
setwd("~/DataScience/R Programming/ProgrammingAssignment2")
source("cachematrix.R")
tau
makeCacheMatrix(tau)
source("cachematrix.R")
makeCacheMatrix(tau)
cacheSolve(tau)
source("cachemean.R")
z <- makeVector(c(0,0,0,1,2,0))
z$get()
cachemean(z)
cachemean(z)
cachemean(z)
z <- makeVector(c(0,0,3,1,2,0))
cachemean(z)
z <- makeVector(c(0,0,0,1,2,0))
cachemean(z)
cachemean(z)
cachemean(z)
z <- makeCacheMatrix(tau)
cacheSolve(z)
cacheSolve(z)
w <- cacheSolve(tau)
tau
z <- makeCacheMatrix(tau)
z
z$getinverse
z$getinverse()
y <- cacheSolve(z)
y$get()
y$getinverse()
y
source("cachematrix.R")
z <- makeCacheMatrix(tau)
y <- cacheSolve(z)
y
y$get()
source("cachematrix.R")
z <- makeCacheMatrix(tau)
y <- cacheSolve(z)
y$get()
source("cachematrix.R")
z <- makeCacheMatrix(tau)
y <- cacheSolve(z)
y$get()
y
z$get()
z$get(tau)
source("cachematrix.R")
z <- makeCacheMatrix(tau)
cacheSolve(z)
t <- cacheSolve(z)
t
t()
z$get()
z$getinverse()
z <- makeCacheMatrix(tau)
t <- cacheSolve(z)
t
t9)
t()
z$get()
z$getinverse()
source("cachematrix.R")
z <- makeCacheMatrix(tau)
y <- cacheSolve(z)
y
y <- cacheSolve(z)
y
y
ncols(tau)
ncol(tau)
nrow(tau)
methods(y)
methods("y")
ls(y)
ls("y")
names(y)
names(tau)
attributes(y)
attributes(z)
rm()
ls()
rm("x")
rm("y")
rm("z")
z <- makeCacheMatrix(tau)
x
?`<<=`
?`<<-`
z$get()
z$getinverse()
names(z)
i <- c("set","get","setinverse","getinverse")
names(z) == i
if (names(z) == 1) { 1 } else { 0 }
if (all(names(z) == 1()) { 1 } else { 0 }
if (all(names(z) == 1)) { 1 } else { 0 }
if (all(names(z) == i)) { 1 } else { 0 }
i <- c("set","get","setinverse","getinverseS")
if (all(names(z) == i)) { 1 } else { 0 }
source("cachematrix.R")
z <- makeCacheMatrix(tau)
y <- cacheSolve(23)
y <- cacheSolve(x=23)
y <- cacheSolve(c(1,2,3))
source("cachematrix.R")
z <- makeCacheMatrix(tau)
y <- cacheSolve(x=23)
x<-23
names(23)
all(names(z) == c("set","get","getCached","setCached"))
!all(names(z) == c("set","get","getCached","setCached"))
!all(names(x) == c("set","get","getCached","setCached"))
all(names(x) == c("set","get","getCached","setCached"))
names(x)
y <- cacheSolve(x=23)
y <- cacheSolve(x)
source("cachematrix.R")
z <- makeCacheMatrix(tau)
x<-23
y <- cacheSolve(x)
y<-cacheSolve()
y<-cacheSolve(z)
names(z)
source("cachematrix.R")
z <- makeCacheMatrix(tau)
y <- cacheSolve(z)
source("cachematrix.R")
z <- makeCacheMatrix(tau)
y <- cacheSolve(z)
y
z$get()
y <- cacheSolve(z)
y
source("cachematrix.R")
z <- makeCacheMatrix(tau)
y <- cacheSolve(z)
y
y <- cacheSolve(z)
y
z <- makeCacheMatrix(c(0,0,1))
i <- c(0,0,1)
ncol(i)
nrow(i)
class(i)
class(tau)
z <- makeCacheMatrix(c(0,0,1))
source("cachematrix.R")
z <- makeCacheMatrix(c(0,0,1))
z <- makeCacheMatrix(tau
z <- makeCacheMatrix(tau()
z <- makeCacheMatrix(tau)
cacheSolve(z)
cacheSolve(z)
i <- matrix(c(0,0,0,1,1), nrows=2)
i <- matrix(c(0,0,0,1,1), nrow=2)
i <- matrix(c(0,0,0,1,1), ncol=2)
i <- matrix(c(0,0,0,1,1), ncol=5)
z <- makeCacheMatrix(i)
source("cachematrix.R")
z <- makeCacheMatrix(i)
z <- makeCacheMatrix(tau)
cacheSolve
cacheSolve(z)
cacheSolve(z)
